#InTerminator = CR LF;
#OutTerminator = CR LF;
##Separator = " ";

## Read Status Packets
## the controller issues status packets of a fixed length at 1 second intervals
## typedef struct {
## 0        unsigned char Length; /* Length of this packet = 32 (bytes) */
## 1        unsigned char Type; /* Status Packet ID = 1 */
## 2        unsigned short GasSetPoint; /* Set Temp 100*K */
## 4        unsigned short GasTemp; /* Gas Temp 100*K */
## 6        signed short GasError; /* Error 100*K */
## 8       unsigned char RunMode; /* The current 'run mode' */
## 9       unsigned char PhaseId; /* theState.PhaseTable[0].Id */
## 10      unsigned short RampRate; /* theState.PhaseTable[0].Temp */
## 12      unsigned short TargetTemp; /* theState.PhaseTable[0].Temp */
## 14      unsigned short EvapTemp; /* Evap temp, 100*K */
## 16      unsigned short SuctTemp; /* Suct temp, 100*K */
## 18      unsigned short Remaining; /* Time remaining in phase */
## 20      unsigned char GasFlow; /* Gas flow, 10*l/min */
## 21      unsigned char GasHeat; /* Gas heater, % */
## 22      unsigned char EvapHeat; /* Evap heater, % */
## 23      unsigned char SuctHeat; /* Suct heater, % */
## 24      unsigned char LinePressure; /* Back pressure, 100*bar */
## 25      unsigned char AlarmCode; /* Indicates most serious alarm condition */
## 26      unsigned short RunTime; /* Time in minutes pump has been up */
## 28      unsigned short ControllerNumber; /* Controller number, from ROM */
## 30      unsigned char SoftwareVersion; /* Software version */
## 31      unsigned char EvapAdjust; /* EvapAdjust vacuum compensation */
## } CryostreamStatus ;
##
## example status packets
## offset*10   0                   1                   2                   3
## offset%10   0 1 2   4   6   8 9 0   2   4   6   8   0 1 2 3 4 5 6   8   0 1
## size (byte) 1 1 2   2   2   2 1 2   2   2   2   2   1 1 1 1 1 1 2   2   1 1
##             20016DAF6DAF00010503000073A03A4F70BCFFFE000000000002001601136E00
##             20016DAF6DAF00010503000073A03A5270BCFFFE000000000002001601136E00
##             20016DAE6DAE00010503000073A03A5470BCFFFE000000000002001601136E00
##             20016DAD6DAD00010503000073A03A5670BCFFFE000000000002001601136E00
##
## offset*10   0                                  1                        2                                       3    
## offset%10   0    1    2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
## size (byte) 1    1    2    2    2    2    1    2    2    2    2    2    1    1    1    1    1    1    2    2    1    1
##             %*01r%*01r%*02r%*02r%*02r%*02r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r
## byte order is big endian, i.e. most significant byte first

## 0        unsigned char Length; /* Length of this packet = 32 (bytes) */
## 1        unsigned char Type; /* Status Packet ID = 1 */

## 2        unsigned short GasSetPoint; /* Set Temp 100*K */
ReadGasSetPoint {
## offset*10   0                               1                        2                                       3    
## offset%10   0   1   2   4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 4        unsigned short GasTemp; /* Gas Temp 100*K */
ReadGasTemp {
## offset*10   0                              1                        2                                       3    
## offset%10   0   1   2    4   6   8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 6        signed short GasError; /* Error 100*K */
ReadGasError {
## offset*10   0                              1                        2                                       3    
## offset%10   0   1   2    4    6  8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%2r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 8       unsigned char RunMode; /* The current 'run mode' */
ReadRunMode {
## offset*10   0                               1                        2                                       3    
## offset%10   0   1   2    4    6    8   9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 9       unsigned char PhaseId; /* theState.PhaseTable[0].Id */
ReadPhaseId {
## offset*10   0                               1                        2                                       3    
## offset%10   0   1   2    4    6    8    9   0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 10      unsigned short RampRate; /* theState.PhaseTable[0].Temp */
ReadRampRate {
## offset*10   0                                1                       2                                       3    
## offset%10   0   1   2    4    6    8    9    0   2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 12      unsigned short TargetTemp; /* theState.PhaseTable[0].Temp */
ReadTargetTemp {
## offset*10   0                                1                       2                                       3    
## offset%10   0   1   2    4    6    8    9    0    2   4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 14      unsigned short EvapTemp; /* Evap temp, 100*K */
ReadEvapTemp {
## offset*10   0                                1                       2                                       3    
## offset%10   0   1   2    4    6    8    9    0    2    4   6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 16      unsigned short SuctTemp; /* Suct temp, 100*K */
ReadSuctTemp {
## offset*10   0                                1                       2                                       3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6   8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 18      unsigned short Remaining; /* Time remaining in phase */
ReadRemaining {
## offset*10   0                                1                       2                                       3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8   0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 20      unsigned char GasFlow; /* Gas flow, 10*l/min */
ReadGasFlow {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0   1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 21      unsigned char GasHeat; /* Gas heater, % */
ReadGasHeat {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1   2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 22      unsigned char EvapHeat; /* Evap heater, % */
ReadEvapHeat {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2   3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%01r%*01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 23      unsigned char SuctHeat; /* Suct heater, % */
ReadSuctHeat {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3   4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%01r%*01r%*01r%*02r%*02r%*01r%*01r";
}

## 24      unsigned char LinePressure; /* Back pressure, 100*bar */
ReadLinePressure {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4   5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%01r%*01r%*02r%*02r%*01r%*01r";
}

## 25      unsigned char AlarmCode; /* Indicates most serious alarm condition */
ReadAlarmCode {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5   6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%01r%*02r%*02r%*01r%*01r";
}

## 26      unsigned short RunTime; /* Time in minutes pump has been up */
ReadRunTime {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6   8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%02r%*02r%*01r%*01r";
}

## 28      unsigned short ControllerNumber; /* Controller number, from ROM */
ReadControllerNumber {
## offset*10   0                                1                        2                                      3    
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6    8   0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%02r%*01r%*01r";
}

## 30      unsigned char SoftwareVersion; /* Software version */
ReadSoftwareVersion {
## offset*10   0                                1                        2                                       3   
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0   1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%01r%*01r";
}

## 31      unsigned char EvapAdjust; /* EvapAdjust vacuum compensation */
ReadEvapAdjust {
## offset*10   0                                1                        2                                       3   
## offset%10   0   1   2    4    6    8    9    0    2    4    6    8    0    1    2    3    4    5    6    8    0    1
    in        "\x20\x01%*02r%*02r%*02r%*01r%*01r%*02r%*02r%*02r%*02r%*02r%*01r%*01r%*01r%*01r%*01r%*01r%*02r%*02r%*01r%01r";
}

## CSCOMMAND_RESTART=10, /* Restart a Cryostream which has shutdown */
## Meaning: Stop Cryostream and re-initialise system back to "Ready"
CmdRestart {
	out 2 10;
}

## CSCOMMAND_RAMP=11, /* Ramp command identifier - parameters follow */
## The CSCOMMAND_RAMP command packet, size = 6
## The Params[] array consists of a short containing 
## desired ramp rate in K/hour,
## followed by a short containing 
## the end temperature in centi-Kelvin
## Meaning: Change gas temperature to a set value at a controlled rate
CmdRamp {
	out 6 11,"%(A).2r%(B)\$1.2r";
}

## CSCOMMAND_PLAT=12, /* Plat command identifier - parameter follows */
## The CSCOMMAND_PLAT command packet, size = 4
## The Params[] array consists of a short containing 
## the duration of the Plat in minutues
## Meaning: Maintain the current temperature for a set amount of time.
CmdPlat {
	out 4 12,"%.2r";
}

## CSCOMMAND_HOLD=13, /* Hold command identifier - enter programmed Hold */
## Meaning: Stay at the current temperature indefinitely with no ability to resume the previous command
## (unlike the SUSPEND and RESUME functions).
CmdHold {
	out 2 13;
}

## CSCOMMAND_COOL=14, /* Cool command identifier - parameter follows */
## The CSCOMMAND_COOL command packet, size = 4
## The Params[] array consists of a short containing 
## the end temperature in centi-Kelvin
## Meaning: Make gas temperature decrease to a set value as quickly as possible
CmdCool {
	out 4 14,"%.2r";
}

## CSCOMMAND_END=15, /* End command identifier - parameter follows */
## The CSCOMMAND_END command packet, size = 4
## The Params[] array consists of a short containing 
## desired ramp rate in K/hour
## Meaning: Bring the gas temperature to 300 K, then shut down
CmdEnd {
	out 4 15,"%.2r";
}


## CSCOMMAND_PURGE=16, /* Purge command identifier */
## Meaning: Bring the gas temperature and the internal temperature to 300 K then shut down
CmdPurge {
	out 2 16;
}

## CSCOMMAND_PAUSE=17, /* Pause command identifier - enter temporary Hold */
## a.k.a the SUSPEND command
## Meaning: Interrupt the current commands and maintain the current gas temperature until instructed
## otherwise by a RESUME command.
CmdPause {
	out 2 17;
}

## CSCOMMAND_RESUME=18, /* Resume command identifier - exit temporary Hold */
## Meaning: Resume the previous command before the SUSPEND command was given
CmdResume {
	out 2 18;
}

## CSCOMMAND_STOP=19, /* Stop command identifier */
CmdStop {
	out 2 19;
}

## CSCOMMAND_TURBO=20, /* Turbo command identifier - parameter follows */
## The CSCOMMAND_TURBO command packet, size = 3
## The Params[] array consists of a single char taking the value 
## either 0 (switch Turbo off) or 1 (switch Turbo on)
CmdTurbo {
	out 3 20,"%.1r";
}
